This directory contains the Agda proofs about the Esterel Calculus.


The proof structure for the proof of consistency works as follows:

Define the caluclus.
  (`calculus.agda`)
Break the calculus into two parts, one containing only
the [par-swap] reduction rule and one containing the
remaining reduction rules.
  (`par-swap.agda` and `sn-calculus.agda`)
prove that the calculus without [par-swap] is strongly normalizing.
  (`sn-calculus-compatconf.agda` and `sn-calculus-confluence.agda`)
prove that the calculus without [par-swap] is locally confluent.
  (`noetherian.agda`)
prove by Newmans lemma that the calculus without [par-swap] is confluent.
  (`sn-calculus-props.agda`)
prove that the [par-swap] reduction rule itself is confluent.
  (`par-swap/confluent.agda`)
prove by Hindley-Rossen that the entire calculus is confluent.
  (`par-swap/union-confluent.agda`)
prove that the union of the [par-swap] reduction rule
and sn-calculus is equivalent to the formulation in `calculus.agda.`
  (`eval-props.agda`)
define the evaluator induced by the reduction relation.
  (`eval.agda`)
prove that the induced evaluator is consistent given
confluence of the reduction relation.
  (`eval-props.agda`)


Other files:
`all.agda` is generated by `../agda-all.rkt`, and imports the files here.
`binding-preserve.agda` proves that correct binding is preserved by reduction.
`blocked.agda` gives the property `blocked`, which is used as a helper in our proofs.
`calculus-examples.agda` contains the proofs of example equivalences (as discussed in the paper).
`context-properties.agda` gives various lemmas about `E` and `C` contexts.
`eval-props.agda` proves that the calculus is consistent w.r.t. its evaluator.
`stdlib013-fix.lagda` copies some proofs that are in the stdlib but private.

Esterel/Lang.agda, Esterel/Variable/*:
  definitions of the language syntax
Esterel/CompletionCode.agda:
  defines the exit codes
Esterel/Context.agda, Esterel/Context/*:
  defines the evaluation context, compatible closure and some properties.
Esterel/Lang/*: defines the language's notion of CorrectBinding and Can.
Esterel/Lang/PotentialFunction/*: Lemmas concerning the Can function.
Data/: Implements finite maps (used for environments)
