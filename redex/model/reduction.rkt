#lang racket
(require redex/reduction-semantics
         esterel-calculus/redex/model/shared
         esterel-calculus/redex/model/lset
         esterel-calculus/redex/model/potential-function)

(provide esterel-standard
         R
         blocked-or-done
         blocked
         blocked-e
         good)

(module+ test (require rackunit))

(define-extended-language esterel-standard esterel-eval
  (D ::= E))

(define R
  (reduction-relation
   esterel-standard #:domain p
   (--> (œÅ Œ∏ A (in-hole D (par stopped done))) (œÅ Œ∏ A (in-hole D (par-‚äì stopped done)))
        (judgment-holds (good Œ∏ D))
        parr)
   ;; TODO this and other rule are not symetric
   (--> (œÅ Œ∏ A (in-hole D (par paused stopped))) (œÅ Œ∏ A (in-hole D (par-‚äì paused stopped)))
        (judgment-holds (good Œ∏ D))
        parl)
   (--> (œÅ Œ∏ A (in-hole D (present S p q)))
        (œÅ Œ∏ A (in-hole D p))
        (judgment-holds (good Œ∏ D))
        (judgment-holds (Œ∏-ref-S Œ∏ S present))
        is-present)
   (--> (œÅ Œ∏ A (in-hole D (present S p q)))
        (œÅ Œ∏ A (in-hole D q))
        (judgment-holds (good Œ∏ D))
        (judgment-holds (Œ∏-ref-S Œ∏ S absent))
        is-absent)
   (--> (œÅ Œ∏ GO (in-hole D (emit S)))
        (œÅ (id-but-typeset-some-parens (<- Œ∏ (mtŒ∏+S S present))) GO (in-hole D nothing))
        (judgment-holds (good Œ∏ D))
        (judgment-holds (Œ∏-ref-S-‚àà Œ∏ S (L2set present unknown)))
        emit)
   (--> (œÅ Œ∏ A (in-hole D (loop p)))
        (œÅ Œ∏ A (in-hole D (loop^stop p p)))
        (judgment-holds (good Œ∏ D))
        loop)
   (--> (œÅ Œ∏ A (in-hole D (seq nothing q)))
        (œÅ Œ∏ A (in-hole D q))
        (judgment-holds (good Œ∏ D))
        seq-done)
   (--> (œÅ Œ∏ A (in-hole D (seq (exit n) q))) (œÅ Œ∏ A (in-hole D (exit n)))
        (judgment-holds (good Œ∏ D))
        seq-exit)
   (--> (œÅ Œ∏ A (in-hole D (loop^stop (exit n) q))) (œÅ Œ∏ A (in-hole D (exit n)))
        (judgment-holds (good Œ∏ D))
        loop^stop-exit)
   (--> (œÅ Œ∏ A (in-hole D (suspend stopped S))) (œÅ Œ∏ A (in-hole D stopped))
        (judgment-holds (good Œ∏ D))
        suspend)
   ;; traps
   (--> (œÅ Œ∏ A (in-hole D (trap stopped))) (œÅ Œ∏ A (in-hole D (harp stopped)))
        (judgment-holds (good Œ∏ D))
        trap)
   ;; lifting signals
   (--> (œÅ Œ∏ A (in-hole D (signal S p)))
        (œÅ Œ∏ A (in-hole D (œÅ (mtŒ∏+S S unknown) WAIT p)))
        (judgment-holds (good Œ∏ D))
        signal)
   ;; shared state
   (-->
    (œÅ Œ∏ A (in-hole D (shared s := e p)))
    (œÅ Œ∏ A (in-hole D (œÅ (mtŒ∏+s s ev old) WAIT p)))
    (judgment-holds (good Œ∏ D))
    (judgment-holds (L‚äÇ (LFV/e e) (Ldom Œ∏)))
    (side-condition (term (all-ready? (LFV/e e) Œ∏)))
    (where ev (Œ¥ e Œ∏))
    shared)
   (-->
    (œÅ Œ∏ GO (in-hole D (<= s e)))
    (œÅ (id-but-typeset-some-parens (<- Œ∏ (mtŒ∏+s s (Œ¥ e Œ∏) new))) GO (in-hole D nothing))
    (judgment-holds (good Œ∏ D))
    (judgment-holds (Œ∏-ref-s Œ∏ s _ old))
    (judgment-holds (L‚äÇ (LFV/e e) (Ldom Œ∏)))
    (side-condition (term (all-ready? (LFV/e e) Œ∏)))
    set-old)
   (-->
    (œÅ Œ∏ GO (in-hole D (<= s e)))
    (œÅ (id-but-typeset-some-parens (<- Œ∏ (mtŒ∏+s s (Œ£ ev (Œ¥ e Œ∏)) new))) GO (in-hole D nothing))
    (judgment-holds (good Œ∏ D))
    (judgment-holds (Œ∏-ref-s Œ∏ s ev new))
    (judgment-holds (L‚äÇ (LFV/e e) (Ldom Œ∏)))
    (side-condition (term (all-ready? (LFV/e e) Œ∏)))
    set-new)
   ;; unshared state
   (-->
    (œÅ Œ∏ A (in-hole D (var x := e p)))
    (œÅ Œ∏ A (in-hole D (œÅ (mtŒ∏+x x (Œ¥ e Œ∏)) WAIT p)))
    (judgment-holds (good Œ∏ D))
    (judgment-holds (L‚äÇ (LFV/e e) (Ldom Œ∏)))
    (side-condition (term (all-ready? (LFV/e e) Œ∏)))
    var)
   (-->
    (œÅ Œ∏ A (in-hole D (:= x e)))
    (œÅ (id-but-typeset-some-parens (<- Œ∏ (mtŒ∏+x x (Œ¥ e Œ∏)))) A (in-hole D nothing))
    (judgment-holds (good Œ∏ D))
    (judgment-holds (L‚àà x (Ldom Œ∏)))
    (judgment-holds (L‚äÇ (LFV/e e) (Ldom Œ∏)))
    (side-condition (term (all-ready? (LFV/e e) Œ∏)))
    set-var)
   ;; if
   (--> (œÅ Œ∏ A (in-hole D (if x p q)))
        (œÅ Œ∏ A (in-hole D q))
        (judgment-holds (good Œ∏ D))
        (judgment-holds (Œ∏-ref-x-but-also-rvalue-false-is-ok-if-ev-is-zero Œ∏ x 0))
        if-false)
   (--> (œÅ Œ∏ A (in-hole D (if x p q)))
        (œÅ Œ∏ A (in-hole D p))
        (judgment-holds (good Œ∏ D))
        (judgment-holds (L‚àà x (Ldom Œ∏)))
        (judgment-holds (¬¨Œ∏-ref-x-and-also-not-rvalue-false Œ∏ x 0))
        if-true)
   ;; lifting
   (-->
    (œÅ Œ∏_1 A_1 (in-hole D (œÅ Œ∏_2 A_2 p)))
    (œÅ (id-but-typeset-some-parens (<- Œ∏_1 Œ∏_2)) (A-‚äì A_1 A_2) (in-hole D p))
    (judgment-holds (good Œ∏_1 D))
    merge)

   ;; progression
   (-->
    (œÅ Œ∏ A p)
    (œÅ (Lresort (Lset-all-absent2 Œ∏ ùïä)) A p)
    (judgment-holds (blocked-or-done Œ∏ p))
    (where ùïä (Lset-sub (Lget-unknown-signals Œ∏) (->S (Can p Œ∏))))
    (side-condition (term (different ùïä (L0set))))
    absence)

   (-->
    (œÅ Œ∏ A p)
    (œÅ (Lset-all-ready Œ∏ ùïä_2) A p)
    (judgment-holds (blocked-or-done Œ∏ p))
    (side-condition (term (same (Lset-sub (Lget-unknown-signals Œ∏) (->S (Can p Œ∏))) (L0set))))
    (where ùïä_1 (Lget-unready-shared Œ∏))
    (where ùïä_2 (Lset-sub ùïä_1 (->sh (Can p Œ∏))))
    (side-condition (term (different ùïä_2 (L0set))))
    readyness)))

(module+ test
  (check-true
   (redex-match?
    esterel-standard
    (œÅ Œ∏ A p)
    `(œÅ ((shar s 1 new) ¬∑) GO (shared s2 := (+ s) pause))))
  (check-true (judgment-holds
               (blocked ((shar s 1 new) ¬∑)
                        (shared s2 := (+ s) pause))))
  )

(define-judgment-form esterel-standard
  #:mode     (good I I)
  #:contract (good Œ∏ D)
  [---------- "hole"
   (good Œ∏ hole)]

  [(good Œ∏ D)
   ---------- "seq"
   (good Œ∏ (seq D q))]

  [(good Œ∏ D)
   ---------- "loop^stop"
   (good Œ∏ (loop^stop D q))]

  [(good Œ∏ D)
   ---------- "parl"
   (good Œ∏ (par D q))]

  [(good Œ∏ D)
   ---------- "par-done"
   (good Œ∏ (par done D))]

  [(good Œ∏ D) (blocked Œ∏ p)
   ---------- "par-blocked"
   (good Œ∏ (par p D))]

  [(good Œ∏ D)
   ---------- "suspend"
   (good Œ∏ (suspend D S))]

  [(good Œ∏ D)
   ---------- "trap"
   (good Œ∏ (trap D))])

(define-judgment-form esterel-standard
  #:mode     (blocked-or-done I I)
  #:contract (blocked-or-done Œ∏ p)
  [---------- "done"
   (blocked-or-done Œ∏ done)]
  [(blocked Œ∏ p)
   --------- "blocked"
   (blocked-or-done Œ∏ p)])

(define-judgment-form esterel-standard
  #:mode     (blocked I I)
  #:contract (blocked Œ∏ p)
  [(Œ∏-ref-S Œ∏ S unknown)
   ---------- "present"
   (blocked Œ∏ (present S p q))]

  [(blocked Œ∏ p) (blocked Œ∏ q)
   ---------- "par-both"
   (blocked Œ∏ (par p q))]

  [(blocked Œ∏ p)
   ---------- "parl"
   (blocked Œ∏ (par p done))]

  [(blocked Œ∏ q)
   ---------- "parr"
   (blocked Œ∏ (par done q))]

  [(blocked Œ∏ p)
   --------- "seq"
   (blocked Œ∏ (seq p q))]

  [(blocked Œ∏ p)
   --------- "loop^stop"
   (blocked Œ∏ (loop^stop p q))]

  [(blocked Œ∏ p)
   --------- "suspend"
   (blocked Œ∏ (suspend p S))]

  [(blocked Œ∏ p)
   --------- "trap"
   (blocked Œ∏ (trap p))]

  [(blocked-e Œ∏ e)
   -------- "shared"
   (blocked Œ∏ (shared s := e p))]

  [(blocked-e Œ∏ e)
   -------- "set-shared"
   (blocked Œ∏ (<= s e))]

  [(blocked-e Œ∏ e)
   -------- "var"
   (blocked Œ∏ (var x := e p))]

  [(blocked-e Œ∏ e)
   -------- "set-seq"
   (blocked Œ∏ (:= x e))])

(module+ test
  (check-false
   (judgment-holds (blocked-e ¬∑ (+)))))

(define-judgment-form esterel-eval
  #:mode     (blocked-e I I)
  #:contract (blocked-e Œ∏ e)
  [(L‚àà-OI s (LFV/e e)) (Œ∏-ref-s Œ∏ s ev new)
   ------------ "new"
   (blocked-e Œ∏ e)]
  [(L‚àà-OI s (LFV/e e)) (Œ∏-ref-s Œ∏ s ev old)
   ------------ "old"
   (blocked-e Œ∏ e)])

(module+ test
  (check-true
   (judgment-holds
    (blocked-e ((shar ss 1 new) ¬∑)
               (+ ss)))))

(module+ test
  (check-true
   (judgment-holds
    (blocked
     ((sig SJ absent)
      ((sig SP unknown)
       ((sig SQ unknown)
        ((sig Sb unknown)
         ((sig Sdp unknown)
          ((sig Sg unknown)
           ((sig Sk unknown)
            ((sig Sl unknown)
             ((shar srandom-shared1620 0 old)
              ((shar srandom-shared1621 0 old)
               ((sig Srandom-signal1618 unknown)
                ((sig Srandom-signal1619 unknown)
                 ((sig Ss unknown)
                  ((sig Sw unknown)
                   ((sig Sxw unknown) ¬∑)))))))))))))))
     (seq (present Srandom-signal1618 pause nothing) nothing))))
  (check-true
   (judgment-holds
    (blocked
     ((sig SJ absent)
      ((sig SP unknown)
       ((sig SQ unknown)
        ((sig Sb unknown)
         ((sig Sdp unknown)
          ((sig Sg unknown)
           ((sig Sk unknown)
            ((sig Sl unknown)
             ((shar srandom-shared1620 0 old)
              ((shar srandom-shared1621 0 old)
               ((sig Srandom-signal1618 unknown)
                ((sig Srandom-signal1619 unknown)
                 ((sig Ss unknown)
                  ((sig Sw unknown)
                   ((sig Sxw unknown) ¬∑)))))))))))))))
     (suspend
      (present Srandom-signal1618 pause nothing)
      Srandom-signal1618))))

  (check-true
   (judgment-holds
    (good
     ¬∑
     (par
      (suspend
       (seq hole nothing)
       Srandom-signal2266)
      nothing))))
  (check-true
   (judgment-holds
    (blocked-or-done
     ((sig Srandom-signal2266 unknown) ¬∑)
     (suspend
      (seq (present Srandom-signal2266 pause nothing) nothing)
      Srandom-signal2266))))
  (check-true
   (judgment-holds
    (blocked-or-done
     ((sig SS unknown) ¬∑)
     (par
      (present SS nothing nothing)
      nothing))))
  (check-true
   (judgment-holds
    (blocked-or-done
     ((sig Srandom-signal2266 unknown) ¬∑)
     (par
      (suspend
       (seq (present Srandom-signal2266 pause nothing) nothing)
       Srandom-signal2266)
      nothing))))

  (check-false
   (judgment-holds
    (blocked-or-done
     ¬∑
     (par pause nothing))))

  (check-false
   (judgment-holds
    (blocked-or-done
     ((sig SGo present)
      ((sig SR present)
       ((sig SSV present)
        ((sig Sd present)
         ((sig Se present)
          ((shar sg3233 0 new)
           ((sig Sr unknown)
            ((sig SsA unknown) ¬∑))))))))
     (suspend (<= sg3233 (+ 9)) SA))))

  (check-true
   (judgment-holds
    (blocked-or-done
     ((sig Sx unknown)
      ((shar sa 0 old) ¬∑))
     (present Sx pause pause))))
  (check-true
   (judgment-holds
    (blocked-or-done
     ((sig Sx unknown)
      ((shar sa 0 old) ¬∑))
     (trap (var xv := ((rfunc ,+) sa) (if xv pause pause))))))
  (check-true
   (judgment-holds
    (blocked-or-done
     ((sig Sx unknown)
      ((shar sa 0 old) ¬∑))
     (par (seq (trap (var xv := ((rfunc ,+) sa) (if xv pause pause)))
               (loop pause))
          (present Sx pause pause))))))


(module+ test
  (check-equal?
   `(<- ((var¬∑ x 1) ¬∑) {(var¬∑ x 2) ¬∑})
   `((var¬∑ x 2) ¬∑))
  (check-equal?
   (apply-reduction-relation*
    R
    `(œÅ ((var¬∑ x 1) ¬∑) GO (:= x ((rfunc ,add1) x))))
   `((œÅ ((var¬∑ x (rvalue 2)) ¬∑) GO nothing)))
  (test-judgment-holds
   (blocked-or-done
    ((sig S1 unknown) ¬∑)
    (loop^stop
     (present S1 pause pause)
     (present S1 pause pause))))
  (check-equal?
   (apply-reduction-relation
    R
    (term
     (œÅ
      ((sig S1 unknown) ¬∑)
      WAIT
      (loop^stop
       (present S1 pause pause)
       (present S1 pause pause)))))
   (list
    (term
     (œÅ
      ((sig S1 absent) ¬∑)
      WAIT
      (loop^stop
       (present S1 pause pause)
       (present S1 pause pause))))))
  (check-equal?
   (apply-reduction-relation*
    R
    `(œÅ {(sig SC unknown) ¬∑} WAIT (seq (present SC nothing nothing) (œÅ {(sig Si unknown) ¬∑} WAIT (present Si (emit SC) nothing)))))
   `((œÅ  {(sig SC absent) {(sig Si absent) ¬∑}}
         WAIT
         nothing)))
  (check-equal?
   (apply-reduction-relation*
    R
    `(œÅ {(sig SC unknown) ¬∑} GO (seq (present SC nothing nothing) (œÅ {(sig Si unknown) ¬∑}  WAIT (present Si (emit SC) nothing)))))
   `((œÅ  {(sig SC absent) {(sig Si absent) ¬∑}}
         GO
         nothing)))
  ;;
  (check-equal?
   (apply-reduction-relation*
    R
    (term
     (œÅ ((sig SI present) ((sig ST unknown) ¬∑)) GO
        (signal S
          (loop (seq (emit S)
                     (seq (present SI pause nothing)
                          (seq (present S (emit ST) nothing)
                               (present SI pause nothing)))))))))
   (term
    ((œÅ ((sig S present) ((sig SI present) ((sig ST absent) ¬∑))) GO
        (loop^stop
         (seq pause
              (seq (present S (emit ST) nothing)
                   (present SI pause nothing)))
         (seq (emit S)
              (seq (present SI pause nothing)
                   (seq (present S (emit ST) nothing)
                        (present SI pause nothing))))))))))
